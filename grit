#!/bin/bash

# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan

AUTOCOMPLETE_TEXT="_grit() {
    local cur prev opts
    COMPREPLY=()
    cur=\"\${COMP_WORDS[COMP_CWORD]}\"
    prev=\"\${COMP_WORDS[COMP_CWORD-1]}\"
    opts=\"pull push force update diff init commit cad uncommit amend sup sut suc\"
    if [ \$COMP_CWORD == 1 ]; then
        COMPREPLY=( \$(compgen -W \"\${opts}\" -- \${cur}) )
    else
        COMPREPLY=( \$(compgen -o default -- \"\${COMP_WORDS[COMP_CWORD]}\") )
    fi
    return 0
}
complete -o filenames -F _grit grit"
AUTOCOMPLETE_FILE="/etc/bash_completion.d/grit"
NO_AUTOCOMPLETE_FILE="./.noauto"

pull() {
    if [ -z "$2" ]; then
        git pull origin develop --no-edit
    else
        git pull origin $2 --no-edit
    fi
}

push() {
    if [ -z "$2" ]; then
        git push origin HEAD
    else
        git push origin $2
    fi
}

force() {
    read -p "What's the magic word? " password
    if [ "$password" == "please" ]; then
        if [ -z "$2" ]; then
            git push origin HEAD --force
        else
            git push origin $2 --force
        fi
    # Cast a spell
    elif [ "$password" == "avada kedavra" ]; then
        echo -e "-${Green}~~~*${Color_Off}"
    # Give some treasure
    elif [ "$password" == "open sesame" ]; then
        echo -e "${Yellow}o${Color_Off}"
    else
        echo "Ah ah ah, you didn't say the magic word!"
    fi
}

update() {
    git pull origin master
}

diff() {
    if [ -z "$2" ]; then
        git diff -w --ignore-blank-lines
    else
        git diff -w --ignore-blank-lines $2
    fi
}

init() {
    git init
    if [ -n "$2" ]; then
        git remote add origin "$2"
    fi
}

commit() {
    if [ -z "$2" ]; then
        git commit
    else
        git commit -m "$2"
    fi
}

cad() {
    git add $2
    if [ -z "$3" ]; then
        git commit
    else
        git commit -m "$3"
    fi
}

uncommit() {
    git reset --soft HEAD^
}

amend() {
    git commit --amend --no-edit
}

sup() {
    git submodule foreach git pull origin master
}

sut() {
    git submodule foreach 'git fetch origin; git checkout $(git describe --tags `git rev-list --tags --max-count=1`);'
}

suc() {
    git submodule foreach $2
}

help() {
    echo "readable git"
    echo "==== COMMANDS ========="
    echo "grit                      list current branches and current modified files"
    echo "grit pull [branch]        pull branch (or develop of none provided)"
    echo "grit push [branch]        push to branch (or HEAD if non provided)"
    echo "grit force [branch]       push to branch (or HEAD) if asked nicely"
    echo "grit update               pull master branch"
    echo "grit diff                 show diff, ignoring whitespace changes"
    echo "grit init [origin]        Initialize a new repo (with the given origin if provided)"
    echo "grit commit [message]     commit staged files with message (opens editor if none provided)"
    echo "grit cad [path] [message] add path and commit with message (opens editor if none provided)"
    echo "grit uncommit             un-commit the last commit without losing work"
    echo "grit amend                amend the staged files to the last commit"
    echo "grit sup                  for each submodule pull the latest master branch"
    echo "grit sut                  for each submodule pull the latest tag"
    echo "grit suc                  for each submodule run a command"
}

status() {
    git branch
    if [[ $(git diff --stat --cached) ]]; then
        echo -e "${Green}Staged files:${Color_Off}"
        git diff --stat=$COLUMNS --cached --color | sed \$d
    fi
    if [[ $(git diff --stat) ]]; then
        echo -e "${Red}Not staged files:${Color_Off}"
        git diff --stat=$COLUMNS --color | sed \$d
    fi
    if [[ $(git ls-files --others --exclude-standard) ]]; then
        echo -e "${Blue}Untracked files:${Color_Off}"
        git ls-files --others --exclude-standard | sed  's/^/ /'
    fi
}

shortcuts() {
    sudo bash -c "> $AUTOCOMPLETE_FILE"
    sudo bash -c "echo '$AUTOCOMPLETE_TEXT' >> $AUTOCOMPLETE_FILE"
}

if [[ ! -f $NO_AUTOCOMPLETE_FILE && ! -f $AUTOCOMPLETE_FILE ]]; then
    read -p "Create shortcuts file? (Y/N)" create

    case $create in
    [yY])
        shortcuts
        ;;
    [nN])
        touch $NO_AUTOCOMPLETE_FILE
        echo "To create a shortcuts file use the command 'grit shortcuts'"
        ;;
    esac
fi

if [ "$(type -t $1)" == "function" ]; then
    $1 "$@"
elif [ "$1" == "-h" ]; then
    help
elif [ -z "$1" ]; then
    status
else
    git "$@"
fi
