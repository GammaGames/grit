#!/bin/bash

# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan

DIR=$(dirname $(cd "$(dirname "$BASH_SOURCE")"; pwd))/grit

grit.pull() {
    if [ -z "$1" ]; then
        git pull origin develop --no-edit
    else
        git pull origin $1 --no-edit
    fi
}

grit.push() {
    if [ -z "$1" ]; then
        git push origin HEAD
    else
        git push origin $1
    fi
}

grit.force() {
    read -p "What's the magic word? " password
    if [ "$password" == "please" ]; then
        if [ -z "$1" ]; then
            git push origin HEAD --force
        else
            git push origin $1 --force
        fi
    # Cast a spell
    elif [ "$password" == "avada kedavra" ]; then
        echo -e "-${Green}~~~*${Color_Off}"
    # Give some treasure
    elif [ "$password" == "open sesame" ]; then
        echo -e "${Yellow}o${Color_Off}"
    else
        echo "Ah ah ah, you didn't say the magic word!"
    fi
}

grit.update() {
    git pull origin master --no-edit
}

grit.refresh() {
    if [ -z "$1" ]; then
        git pull origin develop --no-edit
    else
        git pull origin $1 --no-edit
    fi

    if [ -z "$2" ]; then
        git push origin HEAD
    else
        git push origin $2
    fi
}

grit.bronch() {
    if [ -z "$2" ]; then
        git checkout origin/develop -b $1
    else
        git checkout origin/$1 -b $2
    fi
}

grit.dif() {
    if [ -z "$1" ]; then
        git diff -w --ignore-blank-lines --color-words=.
    else
        git diff -w --ignore-blank-lines --color-words=. $1
    fi
}

grit.diff() {
    if [ -z "$1" ]; then
        git diff -w --ignore-blank-lines
    else
        git diff -w --ignore-blank-lines $1
    fi
}

grit.init() {
    git init
    if [ -n "$1" ]; then
        git remote add origin "$1"
    fi
}

grit.commit() {
    if [ -z "$1" ]; then
        git commit
    else
        git commit -m "$1"
    fi
}

grit.cad() {
    git add $1
    if [ -z "$2" ]; then
        git commit
    else
        git commit -m "$2"
    fi
}

grit.cal() {
    git add "$(history | grep "dif" | tail -1 | head -1 | awk '{print $4}')"
    if [ -z "$1" ]; then
        git commit
    else
        git commit -m "$1"
    fi
}

grit.uncommit() {
    git reset --soft HEAD^
}

grit.amend() {
    git commit --amend --no-edit
}

grit.sup() {
    git submodule foreach git pull origin master
}

grit.sut() {
    git submodule foreach 'git fetch origin; git checkout $(git describe --tags `git rev-list --tags --max-count=1`);'
}

grit.suc() {
    git submodule foreach $1
}

grit.help() {
    echo "readable git"
    echo "==== COMMANDS ========="
    echo "grit                           list current branches and current modified files"
    echo "grit pull [branch]             pull branch (develop if blank)"
    echo "grit push [branch]             push to branch (HEAD if blank)"
    echo "grit force [branch]            push to branch (HEAD) if asked nicely"
    echo "grit update                    pull master branch"
    echo "grit refresh [source] [target] pull source branch (develop if blank) and push to target (HEAD if blank)"
    echo "grit bronch [source] <branch>  create a new branch from origin/source (develop if blank)"
    echo "grit dif                       show diff of words, ignoring whitespace changes"
    echo "grit diff                      show diff, ignoring whitespace changes"
    echo "grit init [origin]             initialize a new repo (with origin if provided)"
    echo "grit commit [message]          commit staged files with message (opens editor if blank)"
    echo "grit cad <path> [message]      add path and commit with message (opens editor if blank)"
    echo "grit cal [message]             add last diff'd file commit with message (opens editor if blank)"
    echo "grit uncommit                  un-commit the last commit without losing work"
    echo "grit amend                     amend the staged files to the last commit"
    echo "grit sup                       for each submodule pull the latest master branch"
    echo "grit sut                       for each submodule pull the latest tag"
    echo "grit suc                       for each submodule run a command"
}

grit.status() {
    git branch
    if [[ $(git diff --stat --cached) ]]; then
        echo -e "${Green}Staged files:${Color_Off}"
        git diff --stat=$COLUMNS --cached --color | sed \$d
    fi
    if [[ $(git diff --stat) ]]; then
        echo -e "${Red}Not staged files:${Color_Off}"
        git diff --stat=$COLUMNS --color | sed \$d
    fi
    if [[ $(git ls-files --others --exclude-standard) ]]; then
        echo -e "${Blue}Untracked files:${Color_Off}"
        git ls-files --others --exclude-standard | sed  's/^/ /'
    fi
}

grit.autocomplete() {
    sudo bash -c "ln -sf $DIR/autocomplete /etc/bash_completion.d/grit"
}

if [[ ! -f "$DIR/.noauto" && -f "$DIR/autocomplete" && ! -f "/etc/bash_completion.d/grit" ]]; then
    read -p "Add autocomplete for commands (Creates file in /etc/bash_completion.d, requires sudo)? (Y/N)" create
    case $create in
    [yY])
        grit.autocomplete
        ;;
    [nN])
        touch "$DIR/.noauto"
        echo "To add autocomplete for commands later use the command 'grit autocomplete'"
        ;;
    esac
fi

if [ "$(type -t grit.$1)" == "function" ]; then
    "grit.$@"
elif [ "$1" == "-h" ]; then
    grit.help
elif [ -z "$1" ]; then
    grit.status
else
    git "$@"
fi
