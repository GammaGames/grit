#!/bin/bash

# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan

DIR=$(dirname $(cd "$(dirname "$BASH_SOURCE")"; pwd))/grit

function grit.pull() {
    if [ -z "$1" ]; then
        git pull origin develop --no-edit
    else
        git pull origin $1 --no-edit
    fi
}

function grit.push() {
    if [ -z "$1" ]; then
        git push origin HEAD
    else
        git push origin $1
    fi
}

function grit.force() {
    read -p "What's the magic word? " password
    if [ "$password" == "please" ]; then
        if [ -z "$1" ]; then
            git push origin HEAD --force
        else
            git push origin $1 --force
        fi
    # Cast a spell
    elif [ "$password" == "avada kedavra" ]; then
        echo -e "-${Green}~~~*${Color_Off}"
    # Give some treasure
    elif [ "$password" == "open sesame" ]; then
        echo -e "${Yellow}o${Color_Off}"
    else
        echo "Ah ah ah, you didn't say the magic word!"
    fi
}

function grit.update() {
    git pull origin main --no-edit
}

function grit.refresh() {
    if [ -z "$1" ]; then
        git pull origin develop --no-edit
    else
        git pull origin $1 --no-edit
    fi

    if [ -z "$2" ]; then
        git push origin HEAD
    else
        git push origin $2
    fi
}

function grit.bronch() {
    if [ -z "$2" ]; then
        git checkout origin/develop -b $1
    else
        git checkout origin/$1 -b $2
    fi
}

function grit.dif() {
    if [ -z "$1" ]; then
        git diff -w --ignore-blank-lines --color-words='\w+|.'
    else
        git diff -w --ignore-blank-lines --color-words='\w+|.' $1
    fi
}

function grit.diff() {
    if [ -z "$1" ]; then
        git diff -w --ignore-blank-lines
    else
        git diff -w --ignore-blank-lines $1
    fi
}

function grit.init() {
    git init
    if [ -n "$1" ]; then
        git remote add origin "$1"
    fi
}

function grit.safe() {
    git config --global --add safe.directory $PWD
}

function grit.commit() {
    if [ -z "$1" ]; then
        git commit
    else
        git commit -m "$1"
    fi
}

function grit.cad() {
    git add $1
    if [ -z "$2" ]; then
        git commit
    else
        # foo
        git commit -m "$2"  # bar
    fi
}

function grit.lad() {
    git add "$(history | grep "dif" | tail -1 | head -1 | awk '{print $4}')"
}

function grit.cal() {
    git add "$(history | grep "dif" | tail -1 | head -1 | awk '{print $4}')"
    if [ -z "$1" ]; then
        git commit
    else
        git commit -m "$1"
    fi
}

function grit.uncommit() {
    git reset --soft HEAD^
}

function grit.amend() {
    git commit --amend --no-edit
}

function grit.sad() {
    git remote add -f $1 $2

    if [ -z "$3" ]; then
        git subtree add --prefix $1 $1 HEAD --squash
    elif [ -z "$4" ]; then
        git subtree add --prefix $1 $1 $3 --squash
    else
        git subtree add $1 $3 --prefix $4 --squash
    fi
}

function grit.sup() {
    git fetch $1

    if [ -z "$2" ]; then
        git subtree pull --prefix $1 $1 HEAD --squash
    elif [ -z "$3" ]; then
        git subtree pull --prefix $1 $1 $2 --squash
    else
        git subtree pull $1 $2 --prefix $3 --squash
    fi
}

function grit.url() {
    if [ -z "$1" ]; then
        git config --get remote.origin.url
    else
        git remote set-url origin "$1"
    fi
}

function grit.help() {
    if [ "$(type -t grit.$1)" == "function" ]; then
        declare -f "grit.$1" | sed '1,2d;$d' | sed -e "s/^    //"
    else
        echo "readable git"
        echo "==== COMMANDS ========="
        echo "grit                            list current branches and current modified files"
        echo "grit help COMMAND               show function body (or general help text if blank)"
        echo "grit pull [BRANCH]              pull branch (develop if blank)"
        echo "grit push [BRANCH]              push to branch (HEAD if blank)"
        echo "grit force [BRANCH]             push to branch (HEAD) if asked nicely"
        echo "grit update                     pull main branch"
        echo "grit refresh [SOURCE] [TARGET]  pull source branch (develop if blank) and push to target (HEAD if blank)"
        echo "grit bronch [SOURCE] TARGET     create a new branch from source (develop if blank)"
        echo "grit dif                        show diff of words, ignoring whitespace changes"
        echo "grit diff                       show diff, ignoring whitespace changes"
        echo "grit init [ORIGIN]              initialize a new repo (with origin if provided)"
        echo "grit safe                       run 'git config --global --add safe.directory \$PWD'"
        echo "grit commit [MESSAGE]           commit staged files with message (opens editor if blank)"
        echo "grit cad PATH [MESSAGE]         add path and commit with message (opens editor if blank)"
        echo "grit lad                        add last diff'd file"
        echo "grit cal [MESSAGE]              add last diff'd file commit with message (opens editor if blank)"
        echo "grit uncommit                   un-commit the last commit without losing work"
        echo "grit amend                      amend the staged files to the last commit"
        echo "grit sad NAME ORIGIN            add subtree to repo with name"
        echo "         [BRANCH] [PREFIX]        use branch (HEAD if blank) and use subfolder (NAME if blank)"
        echo "grit sup NAME [BRANCH] [PREFIX] update subtree by name, branch (HEAD if blank), and subfolder (NAME if blank)"
        echo "grit suc [COMMAND]              for each submodule run a command"
        echo "grit url [URL]                  get the current remote origin url (or set it if provided)"
    fi
}

function grit.status() {
    if git branch ; then
        if [[ $(git diff --stat --cached) ]]; then
            echo -e "${Green}Staged files:${Color_Off}"
            git diff --stat=$COLUMNS --cached --color | sed \$d
        fi
        if [[ $(git diff --stat) ]]; then
            echo -e "${Red}Not staged files:${Color_Off}"
            git diff --stat=$COLUMNS --color | sed \$d
        fi
        if [[ $(git ls-files --others --exclude-standard) ]]; then
            echo -e "${Blue}Untracked files:${Color_Off}"
            git ls-files --others --exclude-standard | sed  's/^/ /'
        fi
    else
        false
    fi
}

function grit.autocomplete() {
    sudo bash -c "ln -sf $DIR/autocomplete /etc/bash_completion.d/grit"
}

if [[ ! -f "$DIR/.noauto" && -f "$DIR/autocomplete" && ! -f "/etc/bash_completion.d/grit" ]]; then
    read -p "Add autocomplete for commands (Creates file in /etc/bash_completion.d, requires sudo)? (Y/N)" create
    case $create in
    [yY])
        grit.autocomplete
        ;;
    [nN])
        touch "$DIR/.noauto"
        echo "To add autocomplete for commands later use the command 'grit autocomplete'"
        ;;
    esac
fi

if [ "$(type -t grit.$1)" == "function" ]; then
    "grit.$@"
elif [ "$1" == "-h" ]; then
    grit.help
elif [ -z "$1" ]; then
    grit.status
else
    git "$@"
fi
